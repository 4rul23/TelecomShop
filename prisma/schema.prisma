generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  phone          String?
  address        String?
  dateRegistered DateTime @default(now())
  role           String   @default("customer")
  sessions       Session[]
  cartItems      CartItem[]
  orders         Order[]
  wishlistItems  WishlistItem[]
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime?
  createdAt DateTime @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  description    String
  price          Int       // Store price in cents/smallest currency unit
  originalPrice  Int?      // Store original price in cents
  image          String?
  brand          String?
  stock          Int       @default(0)
  rating         Float     @default(0)
  reviews        Int       @default(0)
  specifications Json?     // Store specifications as JSON
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  wishlistItems  WishlistItem[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  dateAdded      DateTime  @default(now())

  @@index([categoryId])
  @@index([slug])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Prevent duplicate cart items for same user-product
  @@index([userId])
}

model WishlistItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate wishlist items for same user-product
  @@index([userId])
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int
  status         String      @default("pending") // pending, processing, shipped, delivered, cancelled
  total          Int         // Total amount in cents
  shippingAddress String
  user           User        @relation(fields: [userId], references: [id])
  items          OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int     // Price at time of order in cents
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@index([orderId])
}
